name: Build Cloud Run container

on:
  workflow_call:
    inputs:
      build_image:
        required: true
        type: string
      pom_folder:
        required: false
        type: string
        default: .
      build_native:
        required: false
        type: boolean
        default: true

env:
  IMAGE: ${{ inputs.build_image }}
  REGISTRY_HOSTNAME: europe-west3-docker.pkg.dev
  POM_FOLDER: ${{ inputs.pom_folder }}

jobs:
  build:
    name: Building the Cloud Run Container
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment: live
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '24'
          distribution: 'graalvm'
          cache: maven

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.WIF_PROVIDER }}
          service_account: ${{ secrets.WIF_SERVICE_ACCOUNT }}
          access_token_lifetime: 3600s

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Build all Packages
        run: mvn install -DskipTests -U

      - name: Build native image
        if: ${{ inputs.build_native == true }}
        run: |
          cd ${{ env.POM_FOLDER }}
          mvn spring-boot:build-image -DskipTests -Pnative \
            -Dspring-boot.build-image.imageName=${{env.REGISTRY_HOSTNAME}}/${{vars.PROJECT_ID}}/${{vars.REPOSITORY_NAME}}/${{env.IMAGE}}:latest

      - name: Build Docker image
        if: ${{ inputs.build_native == false }}
        run: |
          cd ${{ env.POM_FOLDER }}
          mvn package -DskipTests
          docker build . -t ${{env.REGISTRY_HOSTNAME}}/${{vars.PROJECT_ID}}/${{vars.REPOSITORY_NAME}}/${{env.IMAGE}}:latest

      - name: Configure Docker via gcloud
        run: |
          gcloud auth configure-docker $REGISTRY_HOSTNAME

      - name: getVersion
        id: getVersion
        run: |
          echo "version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

      - name: Upload artifact
        run: |
          docker push ${{env.REGISTRY_HOSTNAME}}/${{vars.PROJECT_ID}}/${{vars.REPOSITORY_NAME}}/${{env.IMAGE}}
